import os
import subprocess
import os

class Package:
    git_url = None
    revision = None
    cmake_params = None
    config = None

    def __init__(self, git_url=None, revision=None, install_prefix=None, cmake_params=None, config='Debug'):
        self.git_url = git_url
        self.revision = revision
        self.cmake_params = cmake_params
        self.config = config


class AwesomeVimrc(Package):
    git_clone_cmd = 'git clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime'
    def clone(self):
        subprocess.check_call(self.git_clone_cmd, shell=True)

def install_awesome_vimrc(package: Package):
    subprocess.check_call(f'git clone {package.git_url}', shell=True)

packages = {
    "hidapi": Package(
        git_url="https://github.com/libusb/hidapi.git",
        revision="master",
        cmake_params='-DCMAKE_INSTALL_INCLUDEDIR=/usr/local/include'
    ),
    "tl-expected": Package(
        git_url="https://github.com/TartanLlama/expected.git",
        revision="master",
        cmake_params="-DEXPECTED_BUILD_TESTS=OFF"
    ),
    "ti-dlp-sdk": Package(
        git_url="git@gitlab.com:softservernd/3d-scanner-program/ti-dlp-alc-lightcrafter-sdk.git",
        revision="main",
        cmake_params=""
    ),
    "mind-vision-sdk": Package(
        git_url="git@gitlab.com:softservernd/3d-scanner-program/mind-vision-sdk.git",
        revision="main",
        cmake_params=""
    ),
    "eigen": Package(
        git_url="git@gitlab.com:libeigen/eigen.git",
        revision="3.4",
        cmake_params=""
    )
}

def clone_package(package: Package):
    subprocess.check_call(f'git clone {package.git_url}', shell=True)

    repo_dir_name = os.path.basename(package.git_url).split('.')[0]
    os.chdir(repo_dir_name)

    subprocess.check_call(f'git checkout {package.revision}', shell=True)
    subprocess.check_call('git submodule update --init --recursive', shell=True)

def build_package(package: Package, deps_root):
    os.mkdir('build')
    os.chdir('build')

    subprocess.check_call('touch install_manifest.txt', shell=True)

    subprocess.check_call(f'cmake {package.cmake_params} ..', shell=True)
    subprocess.check_call(f'sudo cmake --build . --target install --config {package.config} -- -j', shell=True)

    os.chdir('../../')

def install_package(name, meta, deps_root):
    print(f'install package: {name}')
    clone_package(meta)
    build_package(meta, deps_root)

def main():
    if os.path.exists(".deps"):
        print("deps directory already exist, remove it manually to force install!!!")
        exit(1)

    os.makedirs('.deps', exist_ok=True)
    os.chdir('.deps/')
    deps_root = os.getcwd()

    [install_package(name, meta, deps_root) for name, meta in packages.items()]

if __name__ == '__main__':
    main()
